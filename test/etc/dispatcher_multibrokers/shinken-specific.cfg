#The scheduler is a "Host manager". It get hosts and theirs
#services. It scheduler checks for them.
define scheduler{
       scheduler_name	scheduler-all-1
       address	node1
       port	7768
       spare	0	;is not a spare
       realm	All
       weight		1       ;optionnal: 1
       }


#The second scheduler
define scheduler{
       scheduler_name	scheduler-all-2
       address	node2
       port	7768
       spare	0
       realm	All
       weight		2       ;optionnal: 1
       }


#There is only one reactionner, because it do not need
#load balancing load
define reactionner{
       reactionner_name	reactionner-all-1
       address	node1
       port	7769
       spare	0
       realm 	All
       manage_sub_realms 0	;optionnal: 1
       min_workers	 1	;optionnal: 1
       max_workers	 15	;optionnal: 30
       polling_interval		1       ;optionnal: 1
       }


#There is only one reactionner, because it do not need
#load balancing load
define reactionner{
       reactionner_name	reactionner-all-2
       address	node1
       port	7769
       spare	1
       realm 	All
       manage_sub_realms 0	;optionnal: 1
       min_workers	 1	;optionnal: 1
       max_workers	 15	;optionnal: 30
       polling_interval		1       ;optionnal: 1
       }


#Poller are here to launch checks
define poller{
       poller_name     poller-all-1
       address  node1
       port     7771
       realm	All
       spare	0
       manage_sub_realms 0	;optionnal: 0
       min_workers	 4	;optionnal: 1
       max_workers	 4	;optionnal: 30
       processes_by_worker	256	   ;optionnal: 256
       polling_interval		1       ;optionnal: 1
}


#Poller are here to launch checks
define poller{
       poller_name     poller-all-2
       address  node2
       port     7771
       realm	All
       spare	1
       manage_sub_realms 0	;optionnal: 0
       min_workers	 4	;optionnal: 1
       max_workers	 4	;optionnal: 30
       processes_by_worker	256	   ;optionnal: 256
       polling_interval		1       ;optionnal: 1
}


#The arbiter definition is optionnal
#Like reactionner and broker, it do not need load balanced
define arbiter{
       arbiter_name	Arbiter
       host_name	node1       ;result of the get_hostname.py command (or hostname under Unix)
       address	node1
       port	7770
       spare	0
       #modules		 No module for now
       }


#The broker manage data export (in flat file or in database)
#Here just log files and status.dat file
define broker{
       broker_name	broker-all-1
       address	node1
       port	7772
       spare	0
       realm 	All
       manage_sub_realms 1
       manage_arbiters	 1
       modules		 Status-Dat, Simple-log
       }


#The broker manage data export (in flat file or in database)
#Here just log files and status.dat file
define broker{
       broker_name	broker-all-2
       address	node1
       port	7772
       spare	0
       realm 	All
       manage_sub_realms 1
       manage_arbiters	 1
       modules		 Status-Dat, Simple-log
       }





define realm{
       realm_name	All
       default		1
}




#The log managment for ALL daemons (all in one log, cool isn't it? ).
define module{
       module_name      Simple-log
       module_type      simple_log
       path             /dev/shm/nagios.log
       archive_path	/dev/shm/
}


#Status.dat and objects.cache export. For the old Nagios
#interface
define module{
       module_name              Status-Dat
       module_type              status_dat
       status_file              /usr/local/shinken/var/status.data
       object_cache_file        /usr/local/shinken/var/objects.cache
       status_update_interval   15 ; update status.dat every 15s
}

##All other modules thtat can be called if you have installed
#the databses, or if you want to test something else :)

#Here the NDO/MySQL module
#So you can use with NagVis or Centreon
define module{
       module_name      ToNdodb_Mysql
       module_type      ndodb_mysql
       database         ndo       ; database name
       user             root      ; user of the database
       password         root      ; must be changed
       host             localhost ; host to connect to
       character_set    utf8      ;optionnal, UTF8 is the default
}


#Here a NDO/Oracle module. For Icinga web connection
#Or for DBA that do not like MySQL
define module{
       module_name      ToNdodb_Oracle
       module_type      ndodb_oracle
       database         XE              ;database name (listener in fact)
       user             system          ;user to connect
       password         password        ;Yes I know I have to change my default password...
       oracle_home      /usr/lib/oracle/xe/app/oracle/product/10.2.0/server     ;optional, but can be useful
}


#Here for Merlin/MySQL. For the cool Ninja connection
define module{
       module_name      ToMerlindb_Mysql
       module_type      merlindb
       backend          mysql    ;backend to use, here mysql databse
       database         merlin   ;database name
       user             root     ; ? .. yes, the user of the database...
       password         root     ; wtf? you ask?
       host             localhost ; host of the database
       character_set    utf8     ;optionnal, UTF8 is the default
}


#Here the Merlin/Sqlite. No one use it for now :)
#You look at something: it's also the merlindb module, like the previous,
#it's the same code, it's just the backend parameter that change (and path).
define module{
       module_name      ToMerlindb_Sqlite
       module_type      merlindb
       backend          sqlite    ;like the mysql, but sqlite :)
       database_path    /usr/local/shinken/var/merlindb.sqlite  ;path of the sqlite file
}


#Here the couchdb export. Maybe use one day...
#I should do a mangodb too one day...
#and casandra...
#and voldemort...
#and all other NoSQL database in fact :)
define module{
       module_name      ToCouchdb
       module_type      couchdb
       user             root
       password         root
       host             localhost
}


#Export services perfdata to flat file. for centreon or
#perfparse
define module{
       module_name      Service-Perfdata
       module_type      service_perfdata
       path             /dev/shm/service-perfdata
       mode		a  ;optionnal. Here append
       template		$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEOUTPUT$\t$SERVICESTATE$\t$SERVICEPERFDATA$\n
}


#For hosts this time
#like the previous, but for hosts....
define module{
       module_name      Host-Perfdata
       module_type      host_perfdata
       path             /dev/shm/host-perfdata
       mode		a ;optionna. Here append
       template         $LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTOUTPUT$\t$HOSTSTATE$\t$HOSTPERFDATA$\n
}


#You know livestatus? Yes, there a  Livestatus module for shinken too :)
define module{
       module_name      Livestatus
       module_type      livestatus
       host             *       ; * = listen on all configured ip addresses
       port             50000   ; port to listen
}
