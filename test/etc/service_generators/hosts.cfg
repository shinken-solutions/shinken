define host{
  check_interval                 1
  check_period                   24x7
  contact_groups                 test_contact
  event_handler_enabled          1
  failure_prediction_enabled     1
  flap_detection_enabled         1
  max_check_attempts             3
  name                           generic-host
  notification_interval          1
  notification_options           d,u,r,f,s
  notification_period            24x7
  notifications_enabled          1
  process_perf_data              1
  register                       0
  retain_nonstatus_information   1
  retain_status_information      1
  retry_interval                 1
}

define host{
  action_url                     http://search.cpan.org/dist/Monitoring-Generator-TestConfig/
  address                        127.0.0.1
  alias                          flap_0
  check_command                  check-host-alive!flap
  check_period                   24x7
  host_name                      test_router_0
  hostgroups                     router
  icon_image                     ../../docs/images/switch.png
  icon_image_alt                 icon alt string
  notes                          just a notes string
  notes_url                      http://search.cpan.org/dist/Monitoring-Generator-TestConfig/README
  use                            generic-host
}

define host{
  address                        127.0.0.1
  alias                          up_0
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
  event_handler                  eventhandler
  check_period                   24x7
  host_name                      test_host_0
  hostgroups                     hostgroup_01,up
  parents                        test_router_0
  use                            generic-host

  #Now the generated part
  _disks			 C $(80%!90%)$, D $(95%!70%)$, E, F $(95%!70%)$,G

  # Same but here we say we do not want in fact E and F to be generated
  _disksbis			 C$(80%!90%)$,D$(95%!70%)$,E,F$(95%!70%)$,G
  _!disksbis			 F,E
}


define host{
  address                        127.0.0.1
  alias                          sw_0
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
  event_handler                  eventhandler
  check_period                   24x7
  host_name                      sw_0
  hostgroups                     hostgroup_01,up
  parents                        test_router_0
  use                            generic-host

  #Now the generated part
  _ports			 Unit [1-6] Port [0-46]$(80%!90%)$,Unit [1-6] Port 47$(80%!90%)$
}

define host{
  address                        127.0.0.1
  alias                          sw_1
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
  event_handler                  eventhandler
  check_period                   24x7
  host_name                      sw_1
  hostgroups                     hostgroup_01,up
  use                            generic-host

  #Now the generated part
  _ports                         Gigabit0/1$(1)$$(80%!90%)$,\
                                 Gigabit0/2$(2)$$(80%!90%)$,\
                                 Ethernet0/1$(3)$$(80%!95%)$,\
                                 ISDN1$(4)$$(80%!95%)$
}

define hostgroup {
    hostgroup_name  cisco-routers
    alias           Cisco Routers
}

define host{
    use           generic-host
    host_name     r1
    address       1.1.1.1
    check_command check-host-alive-parent!up!$HOSTSTATE:r1$
    hostgroups    cisco-routers
}

define host{
    use         generic-host
    host_name   r2
    address     1.1.1.2
    check_command check-host-alive-parent!up!$HOSTSTATE:r2$
    hostgroups  cisco-routers
}

define host{
  address                        127.0.0.1
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
  check_period                   24x7
  host_name                      test_host
  hostgroups                     hostgroup_01,up
  use                            generic-host
  register                       0
}

define host{
  use                            test_host
  host_name                      test_host_1
  hostgroups                     hostgroup_01,up,test_df_expand
  _sdescr1                       Generated Service H, Generated Service I
  _sdescr3                       Generated Service L, Generated Service M
}

define host{
  use                            test_host
  host_name                      test_host_2
  hostgroups                     hostgroup_01,up,test_df_expand
  _sdescr2                       Generated Service J, Generated Service K
  _sdescr3                       Generated Service L, Generated Service M
}
