define service{
  active_checks_enabled          1
  check_freshness                0
  check_interval                 1
  check_period                   24x7
  contact_groups                 test_contact
  event_handler_enabled          1
  failure_prediction_enabled     1
  flap_detection_enabled         1
  is_volatile                    0
  max_check_attempts             2
  name                           generic-service
  notification_interval          1
  notification_options           w,u,c,r,f,s
  notification_period            24x7
  notifications_enabled          1
  obsess_over_service            1
  parallelize_check              1
  passive_checks_enabled         1
  process_perf_data              1
  register                       0
  retain_nonstatus_information   1
  retain_status_information      1
  retry_interval                 1
}


define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            test_ok_0
  use                            generic-service
}


# We define a simple database 1 or database 2,
# so we need db1 and db2 service
define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            db1
  use                            generic-service
}


define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            db2
  use                            generic-service
}

define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            web1
  use                            generic-service
}

define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            web2
  use                            generic-service
}


define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            lvs1
  use                            generic-service
}


define service{
  check_command                  check_service!ok
  host_name                      test_host_0
  service_description            lvs2
  use                            generic-service
}

define service{
  check_command                  bp_rule!test_host_0,db1|test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_Or
  use                            generic-service
}


define service{
  check_command                  bp_rule!test_host_0,db1&test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_And
  use                            generic-service
}


define service{
  check_command                  bp_rule!1 of: test_host_0,db1|test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_1Of
  use                            generic-service
}

define service{
  check_command                  bp_rule!-1 of: test_host_0,db1|test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_1Of_neg
  use                            generic-service
}

define service{
  check_command                  bp_rule!50% of: test_host_0,db1|test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_1Of_pct
  use                            generic-service
}

define service{
  check_command                  bp_rule!-50% of: test_host_0,db1|test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_1Of_pct_neg
  use                            generic-service
}


define service{
  check_command                  bp_rule!(test_host_0,db1|test_host_0,db2) & (test_host_0,web1|test_host_0,web2) & (test_host_0,lvs1|test_host_0,lvs2)
  host_name                      test_host_0
  service_description            ERP
  use                            generic-service
}




#Now complex Xof: rules with A,B,Cof rules:
#A
define service{
  check_command  check_service!ok
  host_name                      test_host_0
  service_description            A
  use                            generic-service
}

#B
define service{
  check_command  check_service!ok
  host_name                      test_host_0
  service_description            B
  use                            generic-service
}

#C
define service{
  check_command  check_service!ok
  host_name                      test_host_0
  service_description            C
  use                            generic-service
}

#D
define service{
  check_command  check_service!ok
  host_name                      test_host_0
  service_description            D
  use                            generic-service
}

#E
define service{
  check_command  check_service!ok
  host_name                      test_host_0
  service_description            E
  use                            generic-service
}


# Complex_ABCOf
define service{
  check_command                  bp_rule!5,1,1 of: test_host_0,A|test_host_0,B|test_host_0,C|test_host_0,D|test_host_0,E
  host_name                      test_host_0
  service_description            Complex_ABCOf
  use                            generic-service
}

define service{
  check_command                  bp_rule!100%,20%,20% of: test_host_0,A|test_host_0,B|test_host_0,C|test_host_0,D|test_host_0,E
  host_name                      test_host_0
  service_description            Complex_ABCOf_pct
  use                            generic-service
}




define service{
  check_command                  bp_rule!test_host_0,db1&!test_host_0,db2
  host_name                      test_host_0
  service_description            Simple_And_not
  use                            generic-service
}


define service{
  check_command                  bp_rule!1 of: test_host_0|test_router_0
  host_name                      test_host_0
  service_description            Simple_1Of_with_host
  use                            generic-service
}


define service{
  check_command                  bp_rule!-1 of: test_host_0|test_router_0
  host_name                      test_host_0
  service_description            Simple_1Of_with_host_neg
  use                            generic-service
}


define service{
  check_command                  bp_rule!50% of: test_host_0|test_router_0
  host_name                      test_host_0
  service_description            Simple_1Of_with_host_pct
  use                            generic-service
}


define service{
  check_command                  bp_rule!-50% of: test_host_0|test_router_0
  host_name                      test_host_0
  service_description            Simple_1Of_with_host_pct_neg
  use                            generic-service
}


define service{
  check_command                  bp_rule!(test_host_0,db1| (test_host_0,db2 & (test_host_0,lvs1|test_host_0,lvs2) ) ) & test_router_0
  host_name                      test_host_0
  service_description            Multi_levels
  use                            generic-service
}
