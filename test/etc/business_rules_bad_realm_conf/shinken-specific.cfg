define scheduler{
       scheduler_name   scheduler-1   ; just the name
       address  localhost             ; ip or dns address of the daemon
       port     7768                  ; tcp port of the daemon
       spare    0                     ; (0 = not a spare, 1 = is spare)
       weight           1             ; (some schedulers can manage more hosts than others)
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       check_interval           60    ; ping it every minute
       realm    Realm1                   ; optional (realm are multi-datacenters features)
}

define poller{
       poller_name      poller-1
       address          localhost
       port             7771
       manage_sub_realms 0      ; optional and advanced: does it take jobs from schedulers of sub realms?
       min_workers       0      ; optional: starts with N worker processes. 0 means: "number of cpus"
       max_workers       0      ; optional: no more than N worker processes. 0 means: "number of cpus"
       processes_by_worker      256        ; optional: each worker manages 256 checks
       polling_interval         1       ; optional: get jobs from schedulers each 1 second
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       check_interval           60    ; ping it every minute
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       realm            Realm1
}

define broker{
       broker_name      broker-1
       address          localhost
       port             7772
       spare            0
       modules           Livestatus
       manage_sub_realms 1   ; optional, like for poller
       manage_arbiters   1   ; optional: take data from Arbiter. There should be
       check_interval           60    ; ping it every minute
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       realm    Realm1
}

# Reactionner launches notifications
define reactionner{
       reactionner_name         reactionner-1
       address                  localhost
       port                     7769
       spare                    0
       manage_sub_realms 0      ;optionnal: like for poller
       min_workers       1      ;optionnal: like for poller
       max_workers       15     ;optionnal: like for poller
       polling_interval         1       ;optionnal: like for poller
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       check_interval           60    ; ping it every minute
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       realm                    Realm1
}




#The log managment for ALL daemons (all in one log, cool isn't it? ).
define module{
       module_name      Simple-log
       module_type      simple_log
       path             tmp/nagios.log
       archive_path	tmp
}


#Status.dat and objects.cache export. For the old Nagios
#interface
define module{
       module_name              Status-Dat
       module_type              status_dat
       status_file              /usr/local/shinken/var/status.data
       object_cache_file        /usr/local/shinken/var/objects.cache
       status_update_interval   15 ; update status.dat every 15s
}

##All other modules thtat can be called if you have installed
#the databses, or if you want to test something else :)

#Here the NDO/MySQL module
#So you can use with NagVis or Centreon
define module{
       module_name      ToNdodb_Mysql
       module_type      ndodb_mysql
       database         ndo       ; database name
       user             root      ; user of the database
       password         root      ; must be changed
       host             localhost ; host to connect to
       character_set    utf8      ;optionnal, UTF8 is the default
}


#Here a NDO/Oracle module. For Icinga web connection
#Or for DBA that do not like MySQL
define module{
       module_name      ToNdodb_Oracle
       module_type      ndodb_oracle
       database         XE              ;database name (listener in fact)
       user             system          ;user to connect
       password         password        ;Yes I know I have to change my default password...
       oracle_home      /usr/lib/oracle/xe/app/oracle/product/10.2.0/server     ;optional, but can be useful
}


#Here for Merlin/MySQL. For the cool Ninja connection
define module{
       module_name      ToMerlindb_Mysql
       module_type      merlindb
       backend          mysql    ;backend to use, here mysql databse
       database         merlin   ;database name
       user             root     ; ? .. yes, the user of the database...
       password         root     ; wtf? you ask?
       host             localhost ; host of the database
       character_set    utf8     ;optionnal, UTF8 is the default
}


#Here the Merlin/Sqlite. No one use it for now :)
#You look at something: it's also the merlindb module, like the previous,
#it's the same code, it's just the backend parameter that change (and path).
define module{
       module_name      ToMerlindb_Sqlite
       module_type      merlindb
       backend          sqlite    ;like the mysql, but sqlite :)
       database_path    /usr/local/shinken/var/merlindb.sqlite  ;path of the sqlite file
}


#Here the couchdb export. Maybe use one day...
#I should do a mangodb too one day...
#and casandra...
#and voldemort...
#and all other NoSQL database in fact :)
define module{
       module_name      ToCouchdb
       module_type      couchdb
       user             root
       password         root
       host             localhost
}


#Export services perfdata to flat file. for centreon or
#perfparse
define module{
       module_name      Service-Perfdata
       module_type      service_perfdata
       path             tmp/service-perfdata
       mode		a  ;optionnal. Here append
       template		$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEOUTPUT$\t$SERVICESTATE$\t$SERVICEPERFDATA$\n
}


#For hosts this time
#like the previous, but for hosts....
define module{
       module_name      Host-Perfdata
       module_type      host_perfdata
       path             tmp/host-perfdata
       mode		a ;optionna. Here append
       template         $LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTOUTPUT$\t$HOSTSTATE$\t$HOSTPERFDATA$\n
}


#You know livestatus? Yes, there a  Livestatus module for shinken too :)
define module{
       module_name      Livestatus
       module_type      livestatus
       host             *       ; * = listen on all configured ip addresses
       port             50000   ; port to listen
}



define realm{
       realm_name	NoDefault
}

define realm{
       realm_name	Realm1
}

define realm{
       realm_name	Realm2
}
