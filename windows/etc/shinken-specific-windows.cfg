# This config file defines Shinken specific objects like
# satellites or Realms
#
# This file can be used for defining a simple environement:
# * one scheduler that schedules the checks (but doesn't launch them)
# * one poller (that launches the checks)
# * one reactionner (that sends the notifiations)
# * one broker (that gives jobs to modules. Modules export data like
#   logs, status.dat, mysql export, etc etc)
# * some of the brokers modules (that do the jobs)
# * one arbiter (that reads the configuration and dispatches it to all others)

# So there is no high availability here, just a simple "Nagios
# equivalent" (but with more perf and less code! )

# The scheduler is a "Host manager". It gets the hosts and theirs
# services and it schedules the checks for the pollers.
define scheduler{
       scheduler_name	scheduler-1   ; just the name
       address	localhost             ; ip or dns address of the daemon
       port	7768                  ; tcp port of the daemon

       #optional
       spare	0                     ; (0 = not a spare, 1 = is spare)
       weight		1             ; (some schedulers can manage more hosts than others)
       timeout		3	      ; 'ping' timeout
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ; if at least max_check_attempts ping failed, the node is DEAD
       #modules			PickleRetention,MemcacheRetention
       #modules			NagiosRetention

       # advanced feature
       realm	All                   ; optional (realm are multisites features)
       }


# Pollers launch checks
define poller{
       poller_name	poller-1
       address  	localhost
       port     	7771

       # optional
       manage_sub_realms 0	; optional and advanced: does it take jobs from schedulers of sub realms?
       min_workers	 4	; optional: starts with N processes workers
       max_workers	 4	; optional: no more than N processes workers
       processes_by_worker	256   ; optional: each workers manage 256 checks
       polling_interval		1     ; optional: take jobs from schedulers each 1 second
       timeout		3	      ; 'ping' timeout
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD


       #advanced feature
       realm		All
}


# Reactionner launch notifications
define reactionner{
       reactionner_name		reactionner-1
       address			localhost
       port			7769
       spare			0

       #optional
       manage_sub_realms 0	;optional: like for poller
       min_workers	 1	;optional: like for poller
       max_workers	 15	;optional: like for poller
       polling_interval		1       ;optional: like for poller
       timeout		3	      ; 'ping' timeout
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD

       #optional
       realm 			All
       }

# The broker manage data export (in flat file or in database)
# with it's modules
# Here just log files and status.dat file modules
define broker{
       broker_name	broker-1
       address		localhost
       port		7772
       spare		0

       # Which modules to load? Here only status.dat and nagios.log
       modules		 Simple-log, Livestatus, WebUI

       # optional
       manage_sub_realms 1   ; optional, like for poller
       manage_arbiters	 1   ; optional: take data from Arbiter. There should be
       			     ;only one broker for the arbiter

       timeout		3	      ; 'ping' timeout
       data_timeout	120	      ; 'data send' timeout
       max_check_attempts	3     ;  if at least max_check_attempts ping failed, the node is DEAD

       # advanced
       realm 	All
       }


# Now the modules for broker. First the 2 that are used, and all the others :)

# The log managment for ALL daemons (all in one log, cool isn't it? ).
define module{
       module_name      Simple-log
       module_type      simple_log
       path		@@INSTALLDIR@@\\var\\shinken.log
       archive_path	@@INSTALLDIR@@\\var\\archives/
}


# Status.dat and objects.cache export. For the old Nagios interface
define module{
       module_name		Status-Dat
       module_type		status_dat
       status_file		/usr/local/shinken/var/status.dat
       object_cache_file	/usr/local/shinken/var/objects.cache
       status_update_interval   15 ; update status.dat every 15s
}

# The WebUI broker module
define module{
       module_name      WebUI
       module_type      webui

       host		0.0.0.0       ; means all interfaces
       port		7767

       # IMPORTANT: Change this value or someone may forge cookies!
       auth_secret	CHANGE_ME

       # Uncomment to present a text in the login form
       #login_text     	Welcome on Shinken WebUI.

       # Advanced options. Do not touch it if you don't know what you
       # are doing

       #http_backend    auto
       # ; can be also: wsgiref, cherrypy, paste, tornado, twisted
       # ; or gevent

       # Modules for the WebUI.
       modules		Apache_passwd,ActiveDir_UI,Cfg_password

}

# Check authentification for WebUI using a Active Directory
define module{
       module_name      ActiveDir_UI
       module_type      ad_webui

       # UNCOMMENT this line to really enable this module and allow it to connect!
       #ldap_uri     ldaps://myserver
       username		user
       password		password
       basedn		DC=google,DC=com
}


# Check authentification for WebUI using a apache password file
define module{
       module_name      Apache_passwd
       module_type      passwd_webui

       # WARNING: use the full PATH here!
       passwd 		@@INSTALLDIR@@\\etc\\htpasswd.users

}


# Check authentification for WebUI using password parameter in contact definition
define module{
       module_name      Cfg_password
       module_type      cfg_password_webui

}


# All other modules thtat can be called if you have installed
# the databses, or if you want to test something else :)

# The NDO/MySQL module
# So you can use with NagVis or Centreon
define module{
       module_name	ToNdodb_Mysql
       module_type	ndodb_mysql
       database		ndo       ; database name
       user		root      ; user of the database
       password		root      ; must be changed
       host		localhost ; host to connect to
       character_set	utf8      ;optional, UTF8 is the default
}


# The NDO/Oracle module. For Icinga web connection
# Or for DBA that do not like MySQL
define module{
       module_name	ToNdodb_Oracle
       module_type	ndodb_oracle
       database		XE              ;database name (listener in fact)
       user		system          ;user to connect
       password		password        ;Yes I know I have to change my default password...
       oracle_home      /usr/lib/oracle/xe/app/oracle/product/10.2.0/server     ;optional, but can be useful
}


# Here for Merlin/MySQL. For the cool Ninja connection
define module{
       module_name      ToMerlindb_Mysql
       module_type      merlindb
       backend          mysql    ;backend to use, here mysql databse
       database         merlin   ;database name
       user             root     ; ? .. yes, the user of the database...
       password         root     ; wtf? you ask?
       host		localhost ; host of the database
       character_set    utf8     ;optional, UTF8 is the default
}


# Here the Merlin/Sqlite. No one uses it for now :)
# You look at something: it's also the merlindb module, like the
# previous, it's the same code, it's just the backend parameter that
# change (and path).
define module{
       module_name      ToMerlindb_Sqlite
       module_type      merlindb
       backend		sqlite 	  ;like the mysql, but sqlite :)
       database_path    /tmp/merlindb.sqlite  ;path of the sqlite file
}


# Here the couchdb export. Maybe use one day...
# I should do a mangodb too one day...
# and casandra...
# and voldemort...
# and all other NoSQL database in fact :)
define module{
       module_name      ToCouchdb
       module_type      couchdb
       user             root
       password         root
       host		localhost
}


# Export services perfdata to flat file. for centreon or perfparse
define module{
       module_name      Service-Perfdata
       module_type      service_perfdata
       path		/usr/local/shinken/var/service-perfdata
       #mode		a ; optional. a = append, w = overwrite, p =pipe
       #template		$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$\t$SERVICESTATE$\n
}


# For hosts this time
# like the previous, but for hosts....
define module{
       module_name      Host-Perfdata
       module_type      host_perfdata
       path		/usr/local/shinken/var/host-perfdata
       #mode             a ; optional. a = append, w = overwrite, p =pipe
       #template         $LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTOUTPUT$\t$HOSTSTATE$\t$HOSTPERFDATA$\n

}


# You know livestatus? Yes, there a  Livestatus module for shinken too :)
define module{
       module_name      Livestatus
       module_type      livestatus
       host		*	; * = listen on all configured ip addresses
       port		50000   ; port to listen
       database_file    @@INSTALLDIR@@\\var\\livestatus.db
}


# Send all logs to syslog
define module{
       module_name      Syslog
       module_type      syslog
}


# Use with the PNP interface
define module{
 module_name  NPCD
 module_type  npcdmod
 config_file  /usr/local/pnp4nagios/etc/npcd.cfg
}



#---- For the schedulers
# Now the good flat file retention module
define module{
       module_name      PickleRetention
       module_type      pickle_retention_file
       path             /tmp/retention.dat
}


#---- For the schedulers
# Now the good flat file retention module
define module{
       module_name      NagiosRetention
       module_type      nagios_retention_file
       path             /tmp/retention-nagios.dat
}

# Now the memcache one
# Now the good flat file retention module
define module{
       module_name      MemcacheRetention
       module_type      memcache_retention
       server           127.0.0.1
       port             11211
}


# And the redis one
# Now the good flat file retention module
define module{
       module_name      RedisRetention
       module_type      redis_retention
       server           127.0.0.1
}


# You know GLPI? You can load your hosts from this app (
# with the webservices plugins for GLPI, in xmlrpc mode)
# All hosts read from this will be added to the others of the
# standard flat file
# Warning: just load host_name, experimental.
define module{
       module_name      GLPIImport
       module_type      glpi_import
       uri 		http://localhost/glpi/plugins/webservices/xmlrpc.php
       login_name	glpi
       login_password	glpi
       #use_property       otherserial   ;optional. Will take use value from the otherserial
       #		   field in GLPI (Inventory number:  in the web interface)
}

# You know NSCA? You can send check result to shinken
# using send_nsca command
define module{
       module_name       NSCA
       module_type       nsca_server
       host              *
       port              5667
       encryption_method 0
       password          helloworld
}




# The arbiter definition is optional
# WARNING: You must change host_name with the
# hostname of your machine!!!!
define arbiter{
       arbiter_name	Arbiter-Master
       #host_name	node1       ;result of the hostname command under Unix
       address		localhost   ; IP or DNS adress
       port		7770
       spare		0
       # uncomment the line below if you want to use the GLPI module and the NSCA one
       #modules		GLPIImport, NSCA
       }

# Very advanced feature for multisite managment.
# Consider to look at the doc before touching it :)
define realm{
       realm_name  All
       default		1
}

