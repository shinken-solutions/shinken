################################################################################
#  shinken-specifics-windows.cfg  -  Main configuration file for Shinken Processes
#===============================================================================
# This sample configuration file is used to define a simple environment:
# - 1 arbiter           = reads the configuration and dispatches it to all
#                           others
# - 1 scheduler         = schedules the checks, but doesn't launch them
# - 1 poller            = launches the checks
# - 1 reactionner       = sends the notifications
# - 1 broker            = gives jobs to modules (Modules export data such as
#                           logs, status.dat, mysql export, etc.)
# - broker's modules    = executes the jobs given by the broker
#
# It is a "Nagios equivalent" configuration, but with more performance.
# For high-availability, see other sample files.
#
# This file has three sections for easier reading:
# - Section_1       = Shinken daemon process definitions
# - S1_Arbiter, S1_Scheduler, S1_Poller, S1_Broker, S1_Reactionner, S1_Receiver
# - Section_2_1     = Modules to configure
# - Section_2_2     = Modules (configuration probably not needed)
# - Section_2_3     = Modules (no configuration needed)
# - Section_3       = Realm definitions
# (You can use section names to jump there)
#===============================================================================
# Quickstart:   http://www.shinken-monitoring.org/wiki/configure_shinken
# Reference:    http://www.shinken-monitoring.org/wiki/official/configuringshinken-config
################################################################################

# WARNING: This is a minimal configuration file for Widnows. Some modules are 
#          not defined, consult shinken-specific.cfg for all others and the wiki.
# ASSUMPTIONS : MongoDB must be installed (locally or remotely)
#               Graphite is running on your network somewhere to store perf data

################################################################################
# Section_1 - Shinken Daemon Process Definitions
################################################################################

#===============================================================================
# ARBITER (S1_Arbiter)
#===============================================================================
# Description: The Arbiter is responsible for:
# - Loading, manipulating and dispatching the configuration
# - Validating the health of all other Shinken daemons
# - Issuing global directives to Shinken daemons (kill, activate-spare, etc.)
# http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/arbiter
#===============================================================================
# IMPORTANT: If you use several arbiters you MUST set the host_name on each
# servers to its real DNS name ('hostname' command).
#===============================================================================
define arbiter {
    arbiter_name    Arbiter-Master
    #host_name       node1       ; CHANGE THIS if you have several Arbiters
    address         localhost   ; DNS name or IP
    port            7770
    spare           0           ; 1 = is a spare, 0 = is not a spare

    ## Interesting modules:
    # - CommandFile             = Open the named pipe nagios.cmd
    # - Mongodb                 = Load hosts from a mongodb database
    # - PickleRetentionArbiter  = Save data before exiting
    # - NSCA                    = NSCA server
    # - VMWare_auto_linking     = Lookup at Vphere server for dependencies
    # - GLPI                    = Import hosts from GLPI
    # - TSCA                    = TSCA server
    # - MySQLImport             = Load configuration from a MySQL database
    # - WS_Arbiter              = WebService for pushing results to the arbiter
    # - Collectd                = Wait collectd data, and take perfdata for
    #                               services from it.
    modules     NSCA
    #modules     Mongodb, NSCA, VMWare_auto_linking, WS_Arbiter, Collectd

    ## Uncomment these lines in a HA architecture so the master and slaves know
    ## how long they may wait for each other.
    #timeout              3   ; Ping timeout
    #data_timeout         120 ; Data send timeout
    #max_check_attempts   3   ; If ping fails N or more, then the node is dead
    #check_interval       60  ; Ping node every minutes
}

#===============================================================================
# SCHEDULER (S1_Scheduler)
#===============================================================================
# The scheduler is a "Host manager". It gets the hosts and their services,
# schedules the checks and transmit them to the pollers.
# Description: The scheduler is responsible for:
# - Creating the dependancy tree
# - Scheduling checks
# - Calculating states
# - Requesting actions from a reactionner
# - Buffering and forwarding results its associated broker
# http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/scheduler
#===============================================================================
define scheduler {
    scheduler_name      scheduler-1 ; Just the name
    address             localhost   ; IP or DNS address of the daemon
    port                7768        ; TCP port of the daemon
    ## Optional
    spare               0   ; 1 = is a spare, 0 = is not a spare
    weight              1   ; Some schedulers can manage more hosts than others
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every minutes

    ## Interesting modules that can be used:
    # - PickleRetention     = Save data before exiting in flat-file
    # - MemcacheRetention   = Same, but in a MemCache server
    # - RedisRetention      = Same, but in a Redis server
    # - MongodbRetention    = Same, but in a MongoDB server
    # - NagiosRetention     = Read retention info from a Nagios retention file
    #                           (does not save, only read)
    modules     
    #modules     PickleRetention, MongodbRetention

    ## Advanced Features
    # Realm is for multi-datacenters
    realm   All
    # Skip initial broks creation. Boot fast, but some broker modules won't
    # work with it!
    skip_initial_broks  0
    # In NATted environments, you declare each satellite ip[:port] as seen by
    # *this* scheduler (if port not set, the port declared by satellite itself
    # is used)
    #satellitemap    poller-1=1.2.3.4:1772, reactionner-1=1.2.3.5:1773, ...
}

#===============================================================================
# POLLER (S1_Poller)
#===============================================================================
# Description: The poller is responsible for:
# - Active data acquisition
# - Local passive data acquisition
# http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/poller
#===============================================================================
define poller {
    poller_name     poller-1
    address         localhost
    port            7771

    ## Optional
    manage_sub_realms   0   ; Does it take jobs from schedulers of sub-Realms?
    min_workers         0   ; Starts with N processes (0 = 1 per CPU)
    max_workers         0   ; No more than N processes (0 = 1 per CPU)
    processes_by_worker 256 ; Each worker manages N checks
    polling_interval    1   ; Get jobs from schedulers each 1 second
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every minutes

    ## Interesting modules that can be used:
    # - NrpeBooster     = Makes the check_nrpe binary useless. Therefore it
    #                       enhance performances when there are lot of NRPE
    #                       calls.

    modules     NrpeBooster
    #modules     NrpeBooster

    ## Advanced Features
    #passive         0       ; For DMZ monitoring, set to 1 so the connections
                            ; will be from scheduler -> poller.
    #poller_tags     None
    realm   All
}

#===============================================================================
# BROKER (S1_Broker)
#===============================================================================
# Description: The broker is responsible for:
# - Exporting centralized logs of all Shinken daemon processes
# - Exporting status data
# - Exporting performance data
# - Exposing Shinken APIs:
#   - Status data
#   - Performance data
#   - Configuration data
#   - Command interface
# http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/broker
#===============================================================================
define broker {
    broker_name     broker-1
    address         localhost
    port            7772
    spare           0
    ## Optional
    manage_arbiters     1   ; Take data from Arbiter. There should be only one
                            ; broker for the arbiter.
    manage_sub_realms   1   ; Does it take jobs from schedulers of sub-Realms?
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every minutes

    ## Modules
    # Default: Livestatus, Simple-log, WebUI
    # Other interesting modules that can be used:
    # - PickleRetentionBroker   = Save data when quitting
    # - ToNdodb_Mysql           = NDO DB support
    # - NPCDMOD                 = Use the PNP addon
    # - Graphite-Perfdata       = Use a Graphite time series DB for perfdata
    # - WebUI                   = Shinken Web interface
    # - glpidb                  = Save data in GLPI MySQL database
    modules     Livestatus, WebUI

    ## Advanced
    realm   All
}

#===============================================================================
# REACTIONNER (S1_Reactionner)
#===============================================================================
# Description: The reactionner is responsible for:
# - Executing notification actions
# - Executing event handler actions
# http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/reactionner
#===============================================================================
define reactionner {
    reactionner_name    reactionner-1
    address             localhost
    port                7769
    spare               0

    ## Optionnal
    manage_sub_realms   0   ; Does it take jobs from schedulers of sub-Realms?
    min_workers         1   ; Starts with N processes (0 = 1 per CPU)
    max_workers         15  ; No more than N processes (0 = 1 per CPU)
    polling_interval    1   ; Get jobs from schedulers each 1 second
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every minutes

    ## Modules
    modules     

    ## Advanced
    realm   All
}

################################################################################
# Section_2_1 - Modules to configure
################################################################################
# Note: Modules can only be defined in a compatible Shinken daemon process.
#===============================================================================


## Module:      WebUI
## Loaded by:   Broker
# The Shinken web interface and integrated web server.
define module {
    module_name     WebUI
    module_type     webui
    host            0.0.0.0     ; All interfaces = 0.0.0.0
    port            7767
    auth_secret     CHANGE_ME   ; CHANGE THIS or someone could forge
                                ; cookies!!
    allow_html_output   0       ; Allow or not HTML chars in plugins output.
                                ; WARNING: Allowing can be a security issue.
    max_output_length   100     ; Maximum output length for plugin output in webui
    manage_acl          1       ; Use contacts ACL. 0 allow actions for all.
    play_sound          0       ; Play sound on new non-acknowledged problems.
    #login_text      Welcome on Shinken WebUI    ; Text in the login form.

    ## Modules for WebUI
    # - Apache_passwd   = Use an htpasswd file for auth backend.
    # - ActiveDir_UI    = Use AD for auth backend (and retrieve photos).
    # - Cfg_password    = Use the password set in Shinken contact for auth.
    # - PNP_UI          = Use PNP graphs in the UI.
    # - GRAPHITE_UI     = Use graphs from Graphite time series database.
    # - Mongodb         = Save user preferences to a Mongodb database
    # - SQLitedb        = Save user preferences to a SQLite database
    modules     ActiveDir_UI, Cfg_password, GRAPHITE_UI, Mongodb

    ## Advanced Options
    # Don't use them unless you know what you are doing!
    #http_backend            auto    ; Choice is: auto, wsgiref, cherrypy,
                                     ; paste, tornado, twisted or gevent.
                                     ; Leave auto to find the best available.
    #remote_user_enable      1       ; If WebUI is behind a web server which
                                     ; has already authentified user, enable.
    #remote_user_variable    X_Remote_User  ; Set to the HTTP header containing
                                     ; the authentificated user s name, which
                                     ; must be a Shinken contact.
}

## Module:      GRAPHITE_UI
## Loaded by:   WebUI
# Use Graphite graphs in the WebUI, based on default or graphite URL API
# templates.
define module {
    module_name     GRAPHITE_UI
    module_type     graphite_webui
    uri             http://YOURSERVERNAME/  ; Set your Graphite URI. Note : YOURSERVERNAME will be
                                            ; changed by your broker hostname
    templates_path  @@INSTALLDIR@@\\share\\templates\\graphite\\
    # Optionally specify a source identifier for the metric data sent to
    # Graphite. This can help differentiate data from multiple sources for the
    # same hosts. HostA.GRAPHITE_DATA_SOURCE.service
    # You MUST set the same value in the graphite_perfdata and GRAPHITE_UI module
    # configuration.
    #graphite_data_source    shinken
}

## Module:      Graphite-Perfdata
## Loaded by:   Broker
# Export host and service performance data to Graphite carbon process.
# Graphite is a time series database with a rich web service interface, viewed
# as a modern alternative to RRDtool.  http://graphite.wikidot.com/start
define module {
    module_name     Graphite-Perfdata
    module_type     graphite_perfdata
    host            localhost
    port            2003
    # Optionally specify a source identifier for the metric data sent to
    # Graphite. This can help differentiate data from multiple sources for the
    # same hosts. HostA.GRAPHITE_DATA_SOURCE.service
    # You MUST set the same value in the graphite_perfdata and GRAPHITE_UI module
    # configuration.
    #graphite_data_source    shinken
}

define module{
       module_name      ActiveDir_UI
       module_type      ad_webui

       # UNCOMMENT this line to really enable this module and allow it to connect!
       #ldap_uri     ldaps://myserver
       username       	user
       password		password
       basedn		DC=google,DC=com
}

define module{
    module_name      Livestatus
    module_type      livestatus
    host		*	; * = listen on all configured ip addresses
    port		50000   ; port to listen
    ## Available modules:
    # - logsqlite: send historical logs to a local sqlite database
    # - mongologs: send historical logs to a mongodb database
    # - nulllogs : send historical logs to a black hole
    modules         mongologs
    #debug           @@INSTALLDIR@@\\tmp\\ls.debug   ; Enable only for debugging this module
    #debug_queries   0   ; Set to 1 to dump queries/replies too (very verbose)
}

## Module:      mongologs
## Loaded by:   Livestatus
# Put the Livestatus logs in an mongodb database, so LiveStatus can query them.
define module {
    module_name     mongologs
    module_type     logstore_mongodb
    mongodb_uri     mongodb://localhost/?safe=true  ; Set to your value
}

## Module:      Mongodb
## Loaded by:   Arbiter, WebUI
# In Arbiter: Read objects in a mongodb database (like hosts or services).
# In WebUI: Save/read user preferences.
define module {
    module_name     Mongodb
    module_type     mongodb
    uri             mongodb://localhost/?safe=true
    database        shinken
}

## Module:      MongodbRetention
## Loaded by:   Scheduler
# Retention file to keep state between process restarts.
define module {
    module_name     MongodbRetention
    module_type     mongodb_retention
    uri             mongodb://localhost/?safe=true
    database        shinken
}


define module{
       module_name       NSCA
       module_type       nsca_server
       host              *
       port              5667
       encryption_method 0
       password          helloworld
}



################################################################################
# Section_2_3 - Modules (no configuration needed)
################################################################################


## Module:      NrpeBooster
## Loaded by:   Poller
## Usage:       Tag commands with "module_type nrpe_poller"
# NRPE commands tagged with nrpe_poller as module_type will be managed by this
# module. It will bypass the launch of check_nrpe binary, and will do the
# connection itself. You should not use check_nrpe binary with Shinken.
define module {
    module_name     NrpeBooster
    module_type     nrpe_poller
}

define module{
       module_name      Cfg_password
       module_type      cfg_password_webui

}

################################################################################
# Section_3 - Realm definitions
################################################################################



define realm{
       realm_name  All
       default		1
}

