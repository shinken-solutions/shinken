<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Err_ArbiterSrv_Conf_Parameters_String" xml:space="preserve">
    <value>La commande pour l'Arbiter n'est pas définie dans les paramètres du fichier de configuration.</value>
  </data>
  <data name="Err_BrokerSrv_Conf_Parameters_String" xml:space="preserve">
    <value>La commande pour le Broker n'est pas définie dans les paramètres du fichier de configuration.</value>
  </data>
  <data name="Err_CultureUsing" xml:space="preserve">
    <value>Impossible d'utiliser la culture {0}</value>
  </data>
  <data name="Err_ExceptionThrown" xml:space="preserve">
    <value>Une exception a été levée. Le message est :</value>
  </data>
  <data name="Err_GetConf" xml:space="preserve">
    <value>Une exception a été levée dans la methode GetConf() du service {0}, le message est : {1}</value>
  </data>
  <data name="Err_Python_Launcher_Empty" xml:space="preserve">
    <value>Le lanceur Python (ou sa commande associée) est vide dans le fichier de configuration pour le service shinken</value>
  </data>
  <data name="Err_ServiceObject_IsNotReady" xml:space="preserve">
    <value>L'objet de service n'est pas prêt, le message resultant donne : {0}</value>
  </data>
  <data name="Err_SrvStopException" xml:space="preserve">
    <value>Une exception a été levée pendant l'arrêt du service {0}, le message est : {1}</value>
  </data>
  <data name="Err_SrvStopPending" xml:space="preserve">
    <value>Le service {0} est en cours d'arrët, mais son état ne peut être vérifié</value>
  </data>
  <data name="Err_Srv_Conf_Python" xml:space="preserve">
    <value>Pas de chemin d'accès à Python dans le fichier de configuration pour le service shinken</value>
  </data>
  <data name="SrvExited" xml:space="preserve">
    <value>Le service {0} s'est terminé prematurément</value>
  </data>
  <data name="SrvPID" xml:space="preserve">
    <value>Le service {0} a démarré avec le PID {1}</value>
  </data>
  <data name="SrvPID_NOK" xml:space="preserve">
    <value>Le service {0} ne eput pas démarrer</value>
  </data>
  <data name="SrvStarting" xml:space="preserve">
    <value>Le service {0} est en cours de démarrage</value>
  </data>
  <data name="SrvStopped" xml:space="preserve">
    <value>Le service {0} a été arrété</value>
  </data>
  <data name="SrvStopping" xml:space="preserve">
    <value>Le service {0} est en cours d'arrët</value>
  </data>
  <data name="Wrn_StartNotSet" xml:space="preserve">
    <value>La permission de démarrer le service {0} n'est pas activée. Démarrage impossible.</value>
  </data>
</root>