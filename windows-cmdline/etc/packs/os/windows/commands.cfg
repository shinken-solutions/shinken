# All windows commands are using the check_wmi_plus.pl plugin. Install it with the shinken.sh script.
# You will also need to update the _domainuser _domainpassword macros of your host if it's specific,
# or the defaults values in the etc/shinken/resources.cfg file for global ones.

# Dummy check for business rules command
define command {
	command_name	check_dummy
	command_line	$PLUGINSDIR$/check_dummy $ARG1$ $ARG2$
}

# Command defined if NSCA hosts did not report checks within freshness_threshold defined for the service
define command {
	command_name	no-nsca-reporting
	command_line	$PLUGINSDIR$/check_dummy 2 "CRITICAL: Results of NSCA checks were not reported!"
}


# Command defined if NSCA hosts did not report checks within freshness_threshold defined for the service
define command {
	command_name	no-nrpe-reporting
	command_line	$PLUGINSDIR$/check_dummy 2 "CRITICAL: Results of NRPE checks were not reported!"
}

# Will check all windows disks. -o means the perfdata will be with E: and not names
# and -3 is for printing in output bad states first
define command {
	command_name	check_windows_disks
	command_line	$PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkdrivesize -a '.'  -w $_HOSTWINDOWS_DISK_WARN$ -c $_HOSTWINDOWS_DISK_CRIT$ -o 1 -3 0 -timeout 35 --inidir=$PLUGINSDIR$
}


# Will look for the $ARG1$ (check_windows_eventlogs!application for example) log for at least Severity Level "Warning", were
# recorded in the last 1 hours
define command {
	command_name     check_windows_eventlogs
	command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkeventlog -a $ARG1$ -o 2 -3 1  -w $_HOSTWINDOWS_EVENT_LOG_WARN$ -c $_HOSTWINDOWS_EVENT_LOG_CRIT$  -timeout 35 --inidir=$PLUGINSDIR$
}


# Look for a recent reboot
define command {
       command_name     check_windows_reboot
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkuptime -w '$_HOSTWINDOWS_REBOOT_WARN$' -c '$_HOSTWINDOWS_REBOOT_CRIT$' -timeout 35 --inidir=$PLUGINSDIR$
}

# Look for the physical memory
define command {
       command_name     check_windows_physical_memory
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkmem -w $_HOSTWINDOWS_MEM_WARN$ -c $_HOSTWINDOWS_MEM_CRIT$  -timeout 35 --inidir=$PLUGINSDIR$
}

# And look for swap
define command {
       command_name     check_windows_swap
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkpage -a auto -timeout 35 --inidir=$PLUGINSDIR$
}


# Look for overall CPU
define command {
       command_name     check_windows_overall_cpu
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkcpu -w $_HOSTWINDOWS_ALL_CPU_WARN$ -c $_HOSTWINDOWS_ALL_CPU_CRIT$ -timeout 35 --inidir=$PLUGINSDIR$
}

# And for each CPU
define command {
       command_name     check_windows_each_cpu
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkeachcpu -w $_HOSTWINDOWS_CPU_WARN$ -c $_HOSTWINDOWS_CPU_CRIT$ -timeout 35 --nodataexit 0 --nodatastring "Only one CPU" --inidir=$PLUGINSDIR$
}

# Somelike load average
# Check 20times as quick as possible
define command {
       command_name     check_windows_loadaverage
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkcpuq  -w $_HOSTWINDOWS_LOAD_WARN$ -c $_HOSTWINDOWS_LOAD_CRIT$ -a 20 -y 0 -timeout 35 --inidir=$PLUGINSDIR$
}


# Auto services are started
define command {
       command_name     check_windows_auto_services
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkservice -a Auto -o '$_HOSTWINDOWS_EXCLUDED_AUTO_SERVICES$' -w $_HOSTWINDOWS_AUTO_SERVICES_WARN$ -c $_HOSTWINDOWS_AUTO_SERVICES_CRIT$ -timeout 35 --inidir=$PLUGINSDIR$
}

# Will warn for a >25% CPU process
define command {
       command_name     check_windows_big_processes
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkproc -s cpuabove -a '%' -w $_HOSTWINDOWS_BIG_PROCESS_WARN$ -timeout 35 -exc _AvgCPU=@0:2 --nodataexit 0 --nodatastring "No processes with high CPU found" --inidir=$PLUGINSDIR$
}


# Will warn for a >25% CPU process that we give it the name
# like check_windows_big_process!firefox
define command {
       command_name     check_windows_big_process
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkproc -s cpu -a '$ARG1$' -timeout 35  --nodatamode --inidir=$PLUGINSDIR$
}

# Look for disks I/Os
define command {
       command_name     check_windows_disks_io
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkio -s logical -a '%' -t35 --nodataexit 0 --nodatastring "No disk IO data found" --inidir=$PLUGINSDIR$
}

# Look for too much inactive TS sessions. 0 or 1 is ok, 2 or more is warning
define command {
       command_name     check_windows_inactive_ts_sessions
       command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkts -s sessions -w 'InactiveSessions=0:1' -timeout 35 --inidir=$PLUGINSDIR$
}


# Check a windows share
define command {
       command_name     check_windows_share
       command_line     $PLUGINSDIR$/check_disk_smb -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSERSHORT$" -p "$_HOSTDOMAINPASSWORD$" -W '$_HOSTDOMAIN$' -s '$ARG1$' -w $_HOSTWINDOWS_SHARE_WARN$ -c $_HOSTWINDOWS_SHARE_CRIT$ -timeout 35 --inidir=$PLUGINSDIR$
}

# IPM
# Check a network connection
define command {
	command_name     check_windows_network
	command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" --inidir=$PLUGINSDIR$ -m checknetwork -s state -a "$ARG1$" -w $_HOSTWINDOWS_NETWORK_WARN$ -c $_HOSTWINDOWS_NETWORK_CRIT$
}

# Check for machine users
# Count users 
define command {
	command_name     check_windows_users
	command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" --inidir=$PLUGINSDIR$ -m checkusers -s count -a "$ARG1$" -w $_HOSTWINDOWS_USERS_WARN$ -c $_HOSTWINDOWS_USERS_CRIT$
}

# Check for printer online status ($ARG1$ is printer name)
define command {
	command_name     check_windows_online_printer
	command_line     $PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkprinter -s online -a '$_HOSTPRINTERNAME$' --nodatamode -c ~:0 --inidir=$PLUGINSDIR$
}

# Check for printer paper status ($ARG1$ is printer name)
define command {
	command_name	check_windows_paper_printer
	command_line	$PLUGINSDIR$/check_wmi_plus.pl -H $HOSTADDRESS$ -u "$_HOSTDOMAINUSER$" -p "$_HOSTDOMAINPASSWORD$" -m checkprinter -s paper -a '$_HOSTPRINTERNAME$' --nodatamode -c ~:0 --inidir=$PLUGINSDIR$
}

# Event Handler to restart Windows services
define command {
	command_name 	event_restart_win_service
	# To be refined ...
	command_line 	$PLUGINSDIR$/event_generic.pl -c "/usr/bin/net rpc service stop $ARG1$ -U $USER8$%$USER9$ -I $HOSTADDRESS$" -c "/usr/bin/net rpc service start $ARG1$ -U $USER8$%$USER9$ -I $HOSTADDRESS$" --usefirststatelist "$ARG2$" "$ARG3$" "$ARG4$" "$ARG5$" "$ARG6$" "$ARG7$" "$ARG8$" "$ARG9$"
}

# Event Handler to reboot a Windows machine
# You have to be brave doing this! You'd better make sure your Nagios check only ever goes to HARD State when you expect
# Probably best to add the -r option and reboot only if the text of the service output matches a certain string
# If you do need to add the -r option you can just add it in the service defintion as the first argument
# eg Only reboot if the service output does not contain the word timeout like this event_reboot_win!-r '^(?!.*?timeout).*'
define command {
	command_name	event_reboot_win
	# To be refined ...
	command_line	/usr/bin/sudo $USER6$/event_generic.pl -c "/usr/bin/net rpc shutdown -t 300 -f -r -C 'This computer is being rebooted by Nagios' -U $USER8$%$USER9$ -I $HOSTADDRESS$" $ARG1$ $ARG2$ $ARG3$ $ARG4$ $ARG5$ $ARG6$
}
